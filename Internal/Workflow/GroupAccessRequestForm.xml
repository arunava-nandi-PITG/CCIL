<?xml version="1.0" encoding="UTF-8"?><driver-configuration config-type="app-config" dn="cn=User Application Driver,cn=driverset1,o=system" driver-set-dn="cn=driverset1,o=system" name="User Application Driver">
    <children>
        <provisioning>
            <ds-object ds-object-class="srvprvAppConfig" ds-object-name="AppConfig">
                <ds-attribute ds-attr-name="Version">
                    <ds-value>4.8</ds-value>
                </ds-attribute>
                <ds-object ds-object-class="nrfAuthTypes" ds-object-name="AuthTypes">
                    <ds-attributes/>
                </ds-object>
                <ds-object ds-object-class="nrfUIConfig" ds-object-name="UIConfig">
                    <ds-attributes/>
                    <ds-object ds-object-class="nrfNavItems" ds-object-name="NavItems">
                        <ds-attributes/>
                    </ds-object>
                </ds-object>
                <ds-object ds-object-class="srvprvAppDefs" ds-object-name="AppDefs">
                    <ds-attributes/>
                </ds-object>
                <ds-object ds-object-class="srvprvJSONForms" ds-object-name="WorkflowForms">
                    <ds-attributes/>
                    <ds-object ds-object-class="srvprvJSONForms" ds-object-name="WorkflowApprovalForms">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="srvprvJSONForms" ds-object-name="WorkflowRequestForms">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="srvprvJSONForms" ds-object-name="WorkflowTemplateForms">
                        <ds-attributes/>
                    </ds-object>
                </ds-object>
                <ds-object ds-object-class="srvprvDirectoryModel" ds-object-name="DirectoryModel">
                    <ds-attributes/>
                    <ds-object ds-object-class="srvprvChoiceDefs" ds-object-name="ChoiceDefs">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="srvprvEntityDefs" ds-object-name="EntityDefs">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="srvprvQueryDefs" ds-object-name="QueryDefs">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="srvprvRelationshipDefs" ds-object-name="RelationshipDefs">
                        <ds-attributes/>
                    </ds-object>
                </ds-object>
                <ds-object ds-object-class="srvprvRequestDefs" ds-object-name="RequestDefs">
                    <ds-attributes/>
                    <ds-object ds-object-class="srvprvRequest" ds-object-name="IEMUserAccess">
                        <ds-attributes>
                            <ds-attribute ds-attr-name="Description">
                                <ds-value>This form is used for mapping Group to User</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvStatus">
                                <ds-value>Active</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvFlowStrategy">
                                <ds-value>SingleFlow</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvGrant">
                                <ds-value>true</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvRevoke">
                                <ds-value>false</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvCategoryKey">
                                <ds-value>accounts</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvLocalizedNames">
                                <ds-value>en~Group Access Request Form</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvLocalizedDescrs">
                                <ds-value>en~This form is used for mapping Group to User</ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="XMLData">
                                <ds-value><![CDATA[]]></ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvRequestXML">
                                <ds-value><![CDATA[PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb3Zpc2lvbi1yZXF1ZXN0IGZvcm1TcmM9IjAiIHZlcnNpb249IjMuNi4xIgogICAgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICAgICAgICB4c2k6bm9OYW1lc3BhY2VTY2hlbWFMb2NhdGlvbj0iQXBwcm92YWxSZXF1ZXN0M181XzEueHNkIj4KICAgICAgICA8Zm9ybQogICAgICAgICAgICAgICAgZm9ybS1pZD0icmVxdWVzdF9mb3JtIj4KICAgICAgICAgICAgPGNvbnRlbnQ+CiAgICAgICAgICAgICAgICA8ZmllbGQKICAgICAgICAgICAgICAgIGRhdGEtdHlwZT0iZG4iCiAgICAgICAgICAgICAgICAgICAgbmFtZT0idXNlcmNvZGUiPgogICAgICAgICAgICAgICAgICAgIDxjb250cm9sCiAgICAgICAgICAgICAgICAgICAgY29udHJvbC10eXBlPSJETkxvb2t1cCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRhYmxlPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHByb3BzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb3AKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9ImRpc3BsYXktZW50aXR5ZGVmIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWU+dXNlcjwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0iZGlzcGxheS1leHAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT5DTjwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0iZmllbGQtc3R5bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZS8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0iZmllbGQtY2xhc3NOYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wcm9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb3AKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9ImxhYmVsLXN0eWxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wcm9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb3AKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9ImxhYmVsLWNsYXNzTmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0id2lkdGhQaXhlbHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT43MDA8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wcm9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb3AKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9Im9uY2hhbmdlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iZXZlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT52YXIgZG4gPSBmaWVsZC5nZXRWYWx1ZSgpOyYjeGQ7CiYjeGQ7CmlmKGRuLnRvU3RyaW5nKCkgIT0gIiIpJiN4ZDsKeyYjeGQ7CklEVmF1bHQuZ2V0KCJtYW5hZ2VyIiwgZG4sICJ1c2VyIiwgIm1hbmFnZXIiKSYjeGQ7CklEVmF1bHQuZ2V0KCJjbiIsIGRuLCAidXNlciIsICJDTiIpJiN4ZDsKdmFyIGEgPSBmb3JtLmdldFZhbHVlKCJBY3Rpb24iKSYjeGQ7CmlmIChhPT0iQUREIil7JiN4ZDsKSURWYXVsdC5nbG9iYWxRdWVyeSgiYXJvbGUiLCAiR3JvdXByZW1vdmUiLCB7Im1lbWJlciI6ZG59KTsmI3hkOwomI3hkOwp9JiN4ZDsKJiN4ZDsKaWYgKGE9PSJSRU1PVkUiKSYjeGQ7CnsmI3hkOwpJRFZhdWx0Lmdsb2JhbFF1ZXJ5KCJycm9sZSIsICJncnBhZCIsIHsibWVtYmVyIjpkbn0pOyYjeGQ7CiYjeGQ7Cn0mI3hkOwomI3hkOwomI3hkOwp9JiN4ZDsKPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcHJvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcm9wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJvbmxvYWQiCiAgICAgICAgICAgICAgICAgICAgdHlwZT0iZXZlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT4gICAgJCgiI3dmRm9ybUxheW91dElkIikuY3NzKCJiYWNrZ3JvdW5kLWNvbG9yIiwgIiNGMkY0RjQiKTsmI3hkOwovLyQoImRpdi5udi1mb3JtRmllbGRMYWJlbCIpLnBhcmVudCgpLmNzcygidGV4dC1hbGlnbiIsICJsZWZ0Iik7JiN4ZDsKLy8kKCIjZm9ybURldGFpbCIpLmNzcygidGV4dC1hbGlnbiIsICJsZWZ0Iik7JiN4ZDsKLy8kKCIjdXNlcmNvZGVfbGJsIikuY3NzKCJ0ZXh0LWFsaWduIiwgImxlZnQiKTsmI3hkOwomI3hkOwovLyQoIndmRm9ybUxheW91dElkIikucGFyZW50KCkuY3NzKCJ0ZXh0LWFsaWduIiwgImxlZnQiKTsmI3hkOwovLyQoIiNpZG11YSIpLnBhcmVudCgpLmNzcygidGV4dC1hbGlnbiIsICJsZWZ0Iik7JiN4ZDsKICAgLy8gICQoIiN3ZkZvcm1MYXlvdXRJZCIpLmNzcygiaDEuY29sb3IiLCAiI0ZGRkZGRiIpOyYjeGQ7CiAvLyQoIiNTb2lmZnlVaSIpLmNzcygiaDEuY29sb3IiLCAiI0ZGRkZGRiIpOyYjeGQ7CiAgICAvLyQoIiNpZG11YSIpLmNzcygiYmFja2dyb3VuZC1jb2xvciIsICIjRkZGRkZGIik7JiN4ZDsKIC8vJCgiI2lkbXVhIikuY3NzKCJoMS5jb2xvciIsICIjRkZGRkZGIik7JiN4ZDsKICAgIC8vJCgiI2Zvcm1EZXRhaWwiKS5jc3MoImJhY2tncm91bmQtY29sb3IiLCAiIzAzMjY1ZSIpOyYjeGQ7CiAgIC8vICQoIi5kal9nZWNrbyIpLmNzcygiYmFja2dyb3VuZC1jb2xvciIsICIjMDMyNjVlIik7JiN4ZDsKPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcHJvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wcm9wcz4KICAgICAgICAgICAgICAgICAgICA8L2NvbnRyb2w+CiAgICAgICAgICAgICAgICAgICAgPGRpc3BsYXktbGFiZWwKICAgICAgICAgICAgICAgICAgICB4bWw6bGFuZz0iZW4iPlVzZXIgTmFtZTwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgIDwvZmllbGQ+CiAgICAgICAgICAgICAgICA8ZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgPGNvbnRyb2wKICAgICAgICAgICAgICAgIGNvbnRyb2wtdHlwZT0iTGluZUJyZWFrIi8+CiAgICAgICAgICAgICAgICA8L2ZpZWxkPgogICAgICAgICAgICAgICAgPGZpZWxkCiAgICAgICAgICAgICAgICBkYXRhLXR5cGU9InN0cmluZyIgbmFtZT0iY24iCiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZT0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgIDxjb250cm9sCiAgICAgICAgICAgICAgICAgICAgY29udHJvbC10eXBlPSJUZXh0IiBlZGl0YWJsZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICB2aXNpYmxlPSJmYWxzZSIvPgogICAgICAgICAgICAgICAgICAgIDxkaXNwbGF5LWxhYmVsCiAgICAgICAgICAgICAgICAgICAgeG1sOmxhbmc9ImVuIj5jbjwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgIDwvZmllbGQ+CiAgICAgICAgICAgICAgICA8ZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgPGNvbnRyb2wKICAgICAgICAgICAgICAgIGNvbnRyb2wtdHlwZT0iTGluZUJyZWFrIi8+CiAgICAgICAgICAgICAgICA8L2ZpZWxkPgogICAgICAgICAgICAgICAgPGZpZWxkCiAgICAgICAgICAgICAgICBkYXRhLXR5cGU9InN0cmluZyIgbmFtZT0ibWFuYWdlciIKICAgICAgICAgICAgICAgICAgICB2aXNpYmxlPSJmYWxzZSI+CiAgICAgICAgICAgICAgICAgICAgPGNvbnRyb2wKICAgICAgICAgICAgICAgICAgICBjb250cm9sLXR5cGU9IlRleHQiIGVkaXRhYmxlPSJ0cnVlIgogICAgICAgICAgICAgICAgICAgIHZpc2libGU9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHByb3BzLz4KICAgICAgICAgICAgICAgICAgICA8L2NvbnRyb2w+CiAgICAgICAgICAgICAgICAgICAgPGRpc3BsYXktbGFiZWwKICAgICAgICAgICAgICAgICAgICB4bWw6bGFuZz0iZW4iPk1hbmFnZXI8L2Rpc3BsYXktbGFiZWw+CiAgICAgICAgICAgICAgICA8L2ZpZWxkPgogICAgICAgICAgICAgICAgPGZpZWxkPgogICAgICAgICAgICAgICAgICAgIDxjb250cm9sCiAgICAgICAgICAgICAgICBjb250cm9sLXR5cGU9IkxpbmVCcmVhayIvPgogICAgICAgICAgICAgICAgPC9maWVsZD4KICAgICAgICAgICAgICAgIDxmaWVsZAogICAgICAgICAgICAgICAgZGF0YS10eXBlPSJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgbmFtZT0iQWN0aW9uIj4KICAgICAgICAgICAgICAgICAgICA8Y29udHJvbAogICAgICAgICAgICAgICAgICAgIGNvbnRyb2wtdHlwZT0iUmFkaW9CdXR0b25zIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdGFibGU9InRydWUiPgogICAgICAgICAgICAgICAgICAgICAgICA8cHJvcHM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJvcAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0ibGlzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0ibGlzdC1pdGVtcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpc3QtaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGtleT5BREQ8L2tleT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJlbiI+QUREPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpc3QtaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGlzdC1pdGVtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8a2V5PlJFTU9WRTwva2V5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJlbiI+UkVNT1ZFPC92YWx1ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpc3QtaXRlbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcHJvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcm9wCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJvbmNoYW5nZSIKICAgICAgICAgICAgICAgICAgICB0eXBlPSJldmVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPnZhciBkbiA9Zm9ybS5nZXRWYWx1ZSgidXNlcmNvZGUiKSYjeGQ7CiYjeGQ7CmlmKGRuLnRvU3RyaW5nKCkgIT0gIiIpJiN4ZDsKeyYjeGQ7CklEVmF1bHQuZ2V0KCJtYW5hZ2VyIiwgZG4sICJ1c2VyIiwgIm1hbmFnZXIiKSYjeGQ7CnZhciBhID0gZm9ybS5nZXRWYWx1ZSgiQWN0aW9uIikmI3hkOwppZiAoYT09IkFERCIpeyYjeGQ7CklEVmF1bHQuZ2xvYmFsUXVlcnkoIlJvbGUiLCAiR3JvdXByZW1vdmUiLCB7Im1lbWJlciI6ZG59KTsmI3hkOwp9JiN4ZDsKJiN4ZDsKaWYgKGE9PSJSRU1PVkUiKSYjeGQ7CnsmI3hkOwpJRFZhdWx0Lmdsb2JhbFF1ZXJ5KCJSb2xlIiwgImdycGFkIiwgeyJtZW1iZXIiOmRufSk7JiN4ZDsKfSYjeGQ7CiYjeGQ7CiYjeGQ7Cn0mI3hkOwo8L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wcm9wPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Byb3BzPgogICAgICAgICAgICAgICAgICAgIDwvY29udHJvbD4KICAgICAgICAgICAgICAgICAgICA8ZGlzcGxheS1sYWJlbAogICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJlbiI+QWRkL1JlbW92ZTwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgIDwvZmllbGQ+CiAgICAgICAgICAgICAgICA8ZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgPGNvbnRyb2wKICAgICAgICAgICAgICAgIGNvbnRyb2wtdHlwZT0iTGluZUJyZWFrIi8+CiAgICAgICAgICAgICAgICA8L2ZpZWxkPgogICAgICAgICAgICAgICAgPGZpZWxkCiAgICAgICAgICAgICAgICBkYXRhLXR5cGU9InN0cmluZyIgbmFtZT0iUm9sZSIKICAgICAgICAgICAgICAgICAgICB2aXNpYmxlPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICA8Y29udHJvbAogICAgICAgICAgICAgICAgICAgIGNvbnRyb2wtdHlwZT0iU3RhdGljTGlzdCIgZWRpdGFibGU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlPSJ0cnVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHByb3BzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb3AKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9Im9uY2hhbmdlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT0iZXZlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx2YWx1ZT52YXIgYT0gZm9ybS5nZXRWYWx1ZSgiQWN0aW9uIikmI3hkOwomI3hkOwppZiAoYT09IkFERCIpJiN4ZDsKeyYjeGQ7CnZhciB2YWx1ZSA9IGZpZWxkLmdldFZhbHVlcygpOyYjeGQ7CiYjeGQ7CmlmKHZhbHVlICE9ICIiICZhbXA7JmFtcDsgdmFsdWUgIT0gdW5kZWZpbmVkKXsmI3hkOwomI3hkOwovLwljb25zb2xlLmxvZygiVmFsdWUgb2YgU2NoZW1lQXNzaWdubWVudCAgPT0mZ3Q7ICIsdmFsdWUubGVuZ3RoKTsmI3hkOwoJdmFyIGFyciA9ICIiOyYjeGQ7CiYjeGQ7CmZvcihpPTA7aSZsdDt2YWx1ZS5sZW5ndGg7aSsrKSYjeGQ7CnsmI3hkOwoJCXZhciBtY29kZSA9IElEVmF1bHQuZ2V0KG51bGwsIHZhbHVlW2ldLCAnZ3JvdXAnLCAnRGVzY3JpcHRpb24nKTsmI3hkOwoJCWlmKGkgPT0gIjAiKXsmI3hkOwogICAgICAgICAgICAgICBhcnIgPSBtY29kZTsmI3hkOwogICAgICAgICAgICAgICAgIH0mI3hkOwplbHNlJiN4ZDsKeyYjeGQ7CgkJYXJyID0gYXJyICsiIyIrbWNvZGU7JiN4ZDsKfSYjeGQ7CiAgICAgICAgICAvLyAgICBjb25zb2xlLmxvZygiVmFsdWUgb2YgQXJyIDogIiwgYXJyKTsmI3hkOwp9JiN4ZDsKICAgICAgJiN4ZDsKICAgIC8vIGNvbnNvbGUubG9nKCJWYWx1ZSBvZiBDTiA6ICIsIGFycik7JiN4ZDsKJiN4ZDsKCWZvcm0uc2V0VmFsdWVzKCJhdHJvbGUiLGFycik7JiN4ZDsKICAgICAgZm9ybS5zZXRWYWx1ZXMoInJ0cm9sZSIsICIiKSYjeGQ7CiYjeGQ7Cgljb25zb2xlLmxvZygiVmFsdWUgb2YgfCBTY2hlbWVBc3NpZ25EYXRhIHwgZGF0YSB2YXJpYWJsZSA9PSZndDsgIixmb3JtLmdldFZhbHVlKCJhdHJvbGUiKSk7JiN4ZDsKfSYjeGQ7Cn0mI3hkOwppZiAoYT09IlJFTU9WRSIpJiN4ZDsKeyYjeGQ7CnZhciB2YWx1ZSA9IGZpZWxkLmdldFZhbHVlcygpOyYjeGQ7CiYjeGQ7CmlmKHZhbHVlICE9ICIiICZhbXA7JmFtcDsgdmFsdWUgIT0gdW5kZWZpbmVkKXsmI3hkOwomI3hkOwovLwljb25zb2xlLmxvZygiVmFsdWUgb2YgU2NoZW1lQXNzaWdubWVudCAgPT0mZ3Q7ICIsdmFsdWUubGVuZ3RoKTsmI3hkOwoJdmFyIGFyciA9ICIiOyYjeGQ7CiYjeGQ7CmZvcihpPTA7aSZsdDt2YWx1ZS5sZW5ndGg7aSsrKSYjeGQ7CnsmI3hkOwoJCXZhciBtY29kZSA9IElEVmF1bHQuZ2V0KG51bGwsIHZhbHVlW2ldLCAnZ3JvdXAnLCAnRGVzY3JpcHRpb24nKTsmI3hkOwoJCWlmKGkgPT0gIjAiKXsmI3hkOwogICAgICAgICAgICAgICBhcnIgPSBtY29kZTsmI3hkOwogICAgICAgICAgICAgICAgIH0mI3hkOwplbHNlJiN4ZDsKeyYjeGQ7CgkJYXJyID0gYXJyICsiIyIrbWNvZGU7JiN4ZDsKfSYjeGQ7CiAgICAgICAgICAvLyAgICBjb25zb2xlLmxvZygiVmFsdWUgb2YgQXJyIDogIiwgYXJyKTsmI3hkOwp9JiN4ZDsKICAgICAgJiN4ZDsKICAgIC8vIGNvbnNvbGUubG9nKCJWYWx1ZSBvZiBDTiA6ICIsIGFycik7JiN4ZDsKJiN4ZDsKCWZvcm0uc2V0VmFsdWVzKCJydHJvbGUiLGFycik7JiN4ZDsKICAgICAgZm9ybS5zZXRWYWx1ZXMoImF0cm9sZSIsICIiKSYjeGQ7CiYjeGQ7Cgljb25zb2xlLmxvZygiVmFsdWUgb2YgfCBTY2hlbWVBc3NpZ25EYXRhIHwgZGF0YSB2YXJpYWJsZSA9PSZndDsgIixmb3JtLmdldFZhbHVlKCJydHJvbGUiKSk7JiN4ZDsKfSYjeGQ7Cn08L3ZhbHVlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wcm9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByb3AKICAgICAgICAgICAgICAgICAgICBuYW1lPSJ3aWR0aFBpeGVscyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHZhbHVlPjcwMDwvdmFsdWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Byb3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcHJvcHM+CiAgICAgICAgICAgICAgICAgICAgPC9jb250cm9sPgogICAgICAgICAgICAgICAgICAgIDxkaXNwbGF5LWxhYmVsCiAgICAgICAgICAgICAgICAgICAgeG1sOmxhbmc9ImVuIj5Hcm91cDwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgIDwvZmllbGQ+CiAgICAgICAgICAgICAgICA8ZmllbGQ+CiAgICAgICAgICAgICAgICAgICAgPGNvbnRyb2wKICAgICAgICAgICAgICAgIGNvbnRyb2wtdHlwZT0iTGluZUJyZWFrIi8+CiAgICAgICAgICAgICAgICA8L2ZpZWxkPgogICAgICAgICAgICAgICAgPGZpZWxkCiAgICAgICAgICAgICAgICBkYXRhLXR5cGU9InN0cmluZyIgbmFtZT0iYXRyb2xlIgogICAgICAgICAgICAgICAgICAgIHZpc2libGU9ImZhbHNlIj4KICAgICAgICAgICAgICAgICAgICA8Y29udHJvbAogICAgICAgICAgICAgICAgICAgIGNvbnRyb2wtdHlwZT0iVGV4dCIgZWRpdGFibGU9InRydWUiCiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZT0iZmFsc2UiLz4KICAgICAgICAgICAgICAgICAgICA8ZGlzcGxheS1sYWJlbAogICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJlbiI+YXRyb2xlPC9kaXNwbGF5LWxhYmVsPgogICAgICAgICAgICAgICAgPC9maWVsZD4KICAgICAgICAgICAgICAgIDxmaWVsZD4KICAgICAgICAgICAgICAgICAgICA8Y29udHJvbAogICAgICAgICAgICAgICAgY29udHJvbC10eXBlPSJMaW5lQnJlYWsiLz4KICAgICAgICAgICAgICAgIDwvZmllbGQ+CiAgICAgICAgICAgICAgICA8ZmllbGQKICAgICAgICAgICAgICAgIGRhdGEtdHlwZT0ic3RyaW5nIiBuYW1lPSJydHJvbGUiCiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZT0iZmFsc2UiPgogICAgICAgICAgICAgICAgICAgIDxjb250cm9sCiAgICAgICAgICAgICAgICAgICAgY29udHJvbC10eXBlPSJUZXh0IiBlZGl0YWJsZT0idHJ1ZSIKICAgICAgICAgICAgICAgICAgICB2aXNpYmxlPSJmYWxzZSIvPgogICAgICAgICAgICAgICAgICAgIDxkaXNwbGF5LWxhYmVsCiAgICAgICAgICAgICAgICAgICAgeG1sOmxhbmc9ImVuIj5ydHJvbGU8L2Rpc3BsYXktbGFiZWw+CiAgICAgICAgICAgICAgICA8L2ZpZWxkPgogICAgICAgICAgICAgICAgPGZpZWxkPgogICAgICAgICAgICAgICAgICAgIDxjb250cm9sCiAgICAgICAgICAgICAgICBjb250cm9sLXR5cGU9IkxpbmVCcmVhayIvPgogICAgICAgICAgICAgICAgPC9maWVsZD4KICAgICAgICAgICAgICAgIDxhY3Rpb25zCiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb249ImJvdHRvbSI+CiAgICAgICAgICAgICAgICAgICAgPGFjdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSJTdWJtaXRBY3Rpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8Y29udHJvbAogICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLXR5cGU9IkJ1dHRvbiIKICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZT0idHJ1ZSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGlzcGxheS1sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICB4bWw6bGFuZz0iZnIiPlNvdW1ldHRyZTwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpc3BsYXktbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgeG1sOmxhbmc9Im5sIj5JbmRpZW5lbjwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpc3BsYXktbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgeG1sOmxhbmc9InB0Ij5TdWJtZXRlcjwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpc3BsYXktbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgeG1sOmxhbmc9InJ1Ij7Qn9C10YDQtdC00LDRgtGMPC9kaXNwbGF5LWxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGlzcGxheS1sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICB4bWw6bGFuZz0iemgtVFciPuaPkOS6pDwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpc3BsYXktbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgeG1sOmxhbmc9InpoLUNOIj7mj5DkuqQ8L2Rpc3BsYXktbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNwbGF5LWxhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJlbiI+U3VibWl0PC9kaXNwbGF5LWxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGlzcGxheS1sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICB4bWw6bGFuZz0iZXMiPkVudmlhcjwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpc3BsYXktbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgeG1sOmxhbmc9Iml0Ij5JbnZpYTwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpc3BsYXktbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgeG1sOmxhbmc9InN2Ij5Ta2lja2E8L2Rpc3BsYXktbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNwbGF5LWxhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJkZSI+U2VuZGVuPC9kaXNwbGF5LWxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGlzcGxheS1sYWJlbAogICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJqYSI+6YCB5L+hPC9kaXNwbGF5LWxhYmVsPgogICAgICAgICAgICAgICAgICAgIDwvYWN0aW9uPgogICAgICAgICAgICAgICAgICAgIDxhY3Rpb24KICAgICAgICAgICAgICAgICAgICBibG9jay1vbi1lcnJvcj0iZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9IkNhbmNlbEFjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxjb250cm9sCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2wtdHlwZT0iQnV0dG9uIgogICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNwbGF5LWxhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJmciI+QW5udWxlcjwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpc3BsYXktbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgeG1sOmxhbmc9Im5sIj5Bbm51bGVyZW48L2Rpc3BsYXktbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNwbGF5LWxhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJwdCI+Q2FuY2VsYXI8L2Rpc3BsYXktbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNwbGF5LWxhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJydSI+0J7RgtC80LXQvdCwPC9kaXNwbGF5LWxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGlzcGxheS1sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICB4bWw6bGFuZz0iemgtVFciPuWPlua2iDwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpc3BsYXktbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgeG1sOmxhbmc9InpoLUNOIj7lj5bmtog8L2Rpc3BsYXktbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNwbGF5LWxhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJlbiI+Q2FuY2VsPC9kaXNwbGF5LWxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGlzcGxheS1sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICB4bWw6bGFuZz0iZXMiPkNhbmNlbGFyPC9kaXNwbGF5LWxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGlzcGxheS1sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICB4bWw6bGFuZz0iaXQiPkFubnVsbGE8L2Rpc3BsYXktbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXNwbGF5LWxhYmVsCiAgICAgICAgICAgICAgICAgICAgICAgIHhtbDpsYW5nPSJzdiI+QXZicnl0PC9kaXNwbGF5LWxhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGlzcGxheS1sYWJlbAogICAgICAgICAgICAgICAgICAgICAgICB4bWw6bGFuZz0iZGUiPkFiYnJlY2hlbjwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpc3BsYXktbGFiZWwKICAgICAgICB4bWw6bGFuZz0iamEiPuOCreODo+ODs+OCu+ODqzwvZGlzcGxheS1sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8L2FjdGlvbj4KICAgICAgICAgICAgICAgIDwvYWN0aW9ucz4KICAgICAgICAgICAgPC9jb250ZW50PgogICAgICAgIDwvZm9ybT4KICAgICAgICA8ZGF0YS1pdGVtCiAgICAgICAgZGF0YS10eXBlPSJkbiIgbmFtZT0idXNlcmNvZGUiIHNvdXJjZT0icmVjaXBpZW50IgogICAgICAgIHRhcmdldD0iZmxvd2RhdGEuU3RhcnQvcmVxdWVzdF9mb3JtL3VzZXJjb2RlIgogICAgICAgIHRhcmdldC10eXBlPSJzaW5nbGUtdmFsdWUiLz4KICAgICAgICA8ZGF0YS1pdGVtCiAgICAgICAgZGF0YS10eXBlPSJzdHJpbmciIG5hbWU9ImNuIgogICAgICAgIHRhcmdldD0iZmxvd2RhdGEuU3RhcnQvcmVxdWVzdF9mb3JtL2NuIgogICAgICAgIHRhcmdldC10eXBlPSJzaW5nbGUtdmFsdWUiLz4KICAgICAgICA8ZGF0YS1pdGVtCiAgICAgICAgZGF0YS10eXBlPSJzdHJpbmciIG5hbWU9Im1hbmFnZXIiCiAgICAgICAgdGFyZ2V0PSJmbG93ZGF0YS5TdGFydC9yZXF1ZXN0X2Zvcm0vbWFuYWdlciIKICAgICAgICB0YXJnZXQtdHlwZT0ic2luZ2xlLXZhbHVlIi8+CiAgICAgICAgPGRhdGEtaXRlbQogICAgICAgIGRhdGEtdHlwZT0ic3RyaW5nIiBuYW1lPSJBY3Rpb24iCiAgICAgICAgdGFyZ2V0PSJmbG93ZGF0YS5TdGFydC9yZXF1ZXN0X2Zvcm0vQWN0aW9uIgogICAgICAgIHRhcmdldC10eXBlPSJzaW5nbGUtdmFsdWUiLz4KICAgICAgICA8ZGF0YS1pdGVtCiAgICAgICAgZGF0YS10eXBlPSJzdHJpbmciIG5hbWU9IlJvbGUiCiAgICAgICAgdGFyZ2V0PSJmbG93ZGF0YS5TdGFydC9yZXF1ZXN0X2Zvcm0vUm9sZSIKICAgICAgICB0YXJnZXQtdHlwZT0ic2luZ2xlLXZhbHVlIi8+CiAgICAgICAgPGRhdGEtaXRlbQogICAgICAgIGRhdGEtdHlwZT0ic3RyaW5nIiBuYW1lPSJhdHJvbGUiCiAgICAgICAgdGFyZ2V0PSJmbG93ZGF0YS5TdGFydC9yZXF1ZXN0X2Zvcm0vYXRyb2xlIgogICAgICAgIHRhcmdldC10eXBlPSJzaW5nbGUtdmFsdWUiLz4KICAgICAgICA8ZGF0YS1pdGVtCiAgICAgICAgZGF0YS10eXBlPSJzdHJpbmciIG5hbWU9InJ0cm9sZSIKICAgICAgICB0YXJnZXQ9ImZsb3dkYXRhLlN0YXJ0L3JlcXVlc3RfZm9ybS9ydHJvbGUiIHRhcmdldC10eXBlPSJzaW5nbGUtdmFsdWUiLz4KICAgIDwvcHJvdmlzaW9uLXJlcXVlc3Q+CjwhLS09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCkNvcHlyaWdodCAoYykgMjAwNiBOb3ZlbGwsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4KClRISVMgV09SSyBJUyBTVUJKRUNUIFRPIFUuUy4gQU5EIElOVEVSTkFUSU9OQUwgQ09QWVJJR0hUIExBV1MgQU5EIFRSRUFUSUVTCk5PIFBBUlQgT0YgVEhJUyBXT1JLIE1BWSBCRSBVU0VELCBQUkFDVElDRUQsIFBFUkZPUk1FRCBDT1BJRUQsIERJU1RSSUJVVEVELApSRVZJU0VELCBNT0RJRklFRCwgVFJBTlNMQVRFRCwgQUJSSURHRUQsIENPTkRFTlNFRCwgRVhQQU5ERUQsIENPTExFQ1RFRCwKQ09NUElMRUQsIExJTktFRCwgUkVDQVNULCBUUkFOU0ZPUk1FRCBPUiBBREFQVEVEIFdJVEhPVVQgVEhFIFBSSU9SIFdSSVRURU4KQ09OU0VOVCBPRiBOT1ZFTEwsIElOQy4gQU5ZIFVTRSBPUiBFWFBMT0lUQVRJT04gT0YgVEhJUyBXT1JLIFdJVEhPVVQKQVVUSE9SSVpBVElPTiBDT1VMRCBTVUJKRUNUIFRIRSBQRVJQRVRSQVRPUiBUTyBDUklNSU5BTCBBTkQgQ0lWSUwgCkxJQUJJTElUWS4KCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLT4K]]></ds-value>
                            </ds-attribute>
                            <ds-attribute ds-attr-name="srvprvProcessXML">
                                <ds-value><![CDATA[]]></ds-value>
                            </ds-attribute>
                        </ds-attributes>
                        <ds-rights-other-objects>
                            <ds-rights-object dn="ou=users,o=data"/>
                        </ds-rights-other-objects>
                    </ds-object>
                </ds-object>
                <ds-object ds-object-class="srvprvTeamDefs" ds-object-name="TeamDefs">
                    <ds-attributes/>
                </ds-object>
                <ds-object ds-object-class="nrfConfig" ds-object-name="RoleConfig">
                    <ds-attributes/>
                    <ds-object ds-object-class="nrfAttestations" ds-object-name="Attestations">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="nrfCPRSRequests" ds-object-name="CprsRequests">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="nrfReportDefs" ds-object-name="ReportDefs">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="nrfResourceDefs" ds-object-name="ResourceDefs">
                        <ds-attributes/>
                        <ds-object ds-object-class="nrfResourceDefs" ds-object-name="System">
                            <ds-attributes/>
                        </ds-object>
                    </ds-object>
                    <ds-object ds-object-class="nrfRoleDefs" ds-object-name="RoleDefs">
                        <ds-attributes/>
                        <ds-object ds-object-class="nrfRoleDefs" ds-object-name="Level10">
                            <ds-attributes/>
                        </ds-object>
                        <ds-object ds-object-class="nrfRoleDefs" ds-object-name="Level20">
                            <ds-attributes/>
                            <ds-object ds-object-class="nrfRoleDefs" ds-object-name="System">
                                <ds-attributes/>
                            </ds-object>
                        </ds-object>
                        <ds-object ds-object-class="nrfRoleDefs" ds-object-name="Level30">
                            <ds-attributes/>
                        </ds-object>
                    </ds-object>
                    <ds-object ds-object-class="nrfResourceAssociations" ds-object-name="ResourceAssociations">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="nrfResourceRequests" ds-object-name="ResourceRequests">
                        <ds-attributes/>
                    </ds-object>
                    <ds-object ds-object-class="nrfSODDefs" ds-object-name="SoDDefs">
                        <ds-attributes/>
                    </ds-object>
                </ds-object>
            </ds-object>
        </provisioning>
    </children></driver-configuration>